{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dappTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserSingleTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a1368717bf5d113022ffbbf24dc1037e5998b176776f014863a6d3f96c93b73",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1749987",
    "logsBloom": "0x
    "blockHash": "0xa22ea8c806b611ba678b9635967e309561f64e04d4b78a4e293082b3196ecdbf",
    "transactionHash": "0x0a1368717bf5d113022ffbbf24dc1037e5998b176776f014863a6d3f96c93b73",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x0a1368717bf5d113022ffbbf24dc1037e5998b176776f014863a6d3f96c93b73",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa22ea8c806b611ba678b9635967e309561f64e04d4b78a4e293082b3196ecdbf"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "1749987",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "74841a446952fec5075ca484f35b068b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserSingleTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract TokenFarm is Ownable {\\n    // mapping token address -> staker address -> amount\\n    mapping(address => mapping(address => uint256)) public stakingBalance;\\n    mapping(address => uint256) public uniqueTokensStaked;\\n    mapping(address => address) public tokenPriceFeedMapping;\\n    address[] public stakers;\\n    address[] public allowedTokens;\\n    IERC20 public dappToken;\\n\\n    // stakeTokens\\n    // unstakeTokens\\n    // issueTokens\\n    // addAllowedTokens\\n    // getEthValue\\n\\n    constructor(address _dappTokenAddress) {\\n        dappToken = IERC20(_dappTokenAddress);\\n    }\\n\\n    function setPriceFeedContract(address _token, address _priceFeed)\\n        public\\n        onlyOwner\\n    {\\n        tokenPriceFeedMapping[_token] = _priceFeed;\\n    }\\n\\n    function issueTokens() public onlyOwner {\\n        // Issue tokens to all stakers\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint256 userTotalValue = getUserTotalValue(recipient);\\n            dappToken.transfer(recipient, userTotalValue);\\n            // send them a token reward\\n            // dappToken.transfer(recipient, );\\n            // based on their total value locked\\n        }\\n    }\\n\\n    function getUserTotalValue(address _user) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        require(uniqueTokensStaked[_user] > 0, \\\"No tokens staked!\\\");\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            totalValue += getUserSingleTokenValue(_user, allowedTokens[i]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getUserSingleTokenValue(address _user, address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (uniqueTokensStaked[_user] <= 0) {\\n            return 0;\\n        }\\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\\n        return ((stakingBalance[_token][_user] * price) / (10**decimals));\\n    }\\n\\n    function getTokenValue(address _token)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // priceFeedAddress\\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            priceFeedAddress\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 decimals = uint256(priceFeed.decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    function stakeTokens(uint256 _amount, address _token) public {\\n        // what tokens can they stake?\\n        // how much can they stake?\\n        require(_amount > 0, \\\"Amount must be more than zero!\\\");\\n        require(tokenIsAllowed(_token), \\\"Token is currently not allowed!\\\");\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        updateUniqueTokensStaked(msg.sender, _token);\\n        stakingBalance[_token][msg.sender] += _amount;\\n        if (uniqueTokensStaked[msg.sender] == 1) {\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    function unstakeTokens(address _token) public {\\n        uint256 balance = stakingBalance[_token][msg.sender];\\n        require(balance > 0, \\\"Staking balance cannot be 0\\\");\\n        IERC20(_token).transfer(msg.sender, balance);\\n        stakingBalance[_token][msg.sender] = 0;\\n        uniqueTokensStaked[msg.sender]--;\\n    }\\n\\n    function updateUniqueTokensStaked(address _user, address _token) internal {\\n        if (stakingBalance[_token][_user] <= 0) {\\n            uniqueTokensStaked[_user] += 1;\\n        }\\n    }\\n\\n    function addAllowedTokens(address _token) public onlyOwner {\\n        allowedTokens.push(_token);\\n    }\\n\\n    function tokenIsAllowed(address _token) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (_token == allowedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x96aa6eb3abdcd1a053b812010d1eeeb00a03d1de63039339f18a12ccfc561769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fe138038062001fe18339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b611dca80620002176000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b83e023411610071578063b83e0234146102cb578063dd5b8467146102fb578063f1c5d6c21461032b578063f2fde38b1461035c578063fd5e6dd11461037857610116565b8063715018a614610257578063877dd39d146102615780638da5cb5b1461027d578063af3f5e221461029b57610116565b806329161a00116100e957806329161a00146101b35780632d1ad8b8146101e35780635e5f2e26146101ff5780635eb186f81461022f57806360ab58521461024d57610116565b80630bea440d1461011b578063171e44ea14610137578063276b11da1461015357806327927b3e14610183575b600080fd5b61013560048036038101906101309190611348565b6103a8565b005b610151600480360381019061014c9190611388565b610610565b005b61016d600480360381019061016891906113b5565b61067e565b60405161017a9190611404565b60405180910390f35b61019d60048036038101906101989190611388565b610789565b6040516101aa919061142e565b60405180910390f35b6101cd60048036038101906101c891906113b5565b6107bc565b6040516101da9190611404565b60405180910390f35b6101fd60048036038101906101f89190611388565b6107e1565b005b61021960048036038101906102149190611449565b610a0e565b604051610226919061142e565b60405180910390f35b610237610a4d565b60405161024491906114d5565b60405180910390f35b610255610a73565b005b61025f610ba3565b005b61027b600480360381019061027691906113b5565b610bb7565b005b610285610c41565b604051610292919061142e565b60405180910390f35b6102b560048036038101906102b09190611388565b610c6a565b6040516102c29190611404565b60405180910390f35b6102e560048036038101906102e09190611388565b610d75565b6040516102f29190611404565b60405180910390f35b61031560048036038101906103109190611388565b610d8d565b604051610322919061150b565b60405180910390f35b61034560048036038101906103409190611388565b610e3c565b604051610353929190611526565b60405180910390f35b61037660048036038101906103719190611388565b610fc2565b005b610392600480360381019061038d9190611449565b611046565b60405161039f919061142e565b60405180910390f35b600082116103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e2906115ac565b60405180910390fd5b6103f481610d8d565b610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90611618565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161047093929190611638565b602060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c2919061169b565b506104cd3382611085565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055991906116f7565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561060c576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b610618611165565b6005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116106cf5760009050610783565b6000806106db84610e3c565b9150915080600a6106ec9190611880565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461077491906118cb565b61077e9190611954565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c906119d1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108e09291906119f1565b602060405180830381600087803b1580156108fa57600080fd5b505af115801561090e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610932919061169b565b506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610a0590611a1a565b91905055505050565b60058181548110610a1e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a7b611165565b60005b600480549050811015610ba057600060048281548110610aa157610aa0611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610ad982610c6a565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610b389291906119f1565b602060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a919061169b565b5050508080610b9890611a73565b915050610a7e565b50565b610bab611165565b610bb560006111e3565b565b610bbf611165565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea90611b08565b60405180910390fd5b60005b600580549050811015610d6b57610d4b8460058381548110610d1b57610d1a611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661067e565b82610d5691906116f7565b91508080610d6390611a73565b915050610cf6565b5080915050919050565b60026020528060005260406000206000915090505481565b600080600090505b600580549050811015610e315760058181548110610db657610db5611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e1e576001915050610e37565b8080610e2990611a73565b915050610d95565b50600090505b919050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ef057600080fd5b505afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190611bb5565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7657600080fd5b505afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190611c69565b60ff16905081819550955050505050915091565b610fca611165565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103190611d08565b60405180910390fd5b611043816111e3565b50565b6004818154811061105657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611161576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115991906116f7565b925050819055505b5050565b61116d6112a7565b73ffffffffffffffffffffffffffffffffffffffff1661118b610c41565b73ffffffffffffffffffffffffffffffffffffffff16146111e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d890611d74565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6112c7816112b4565b81146112d257600080fd5b50565b6000813590506112e4816112be565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611315826112ea565b9050919050565b6113258161130a565b811461133057600080fd5b50565b6000813590506113428161131c565b92915050565b6000806040838503121561135f5761135e6112af565b5b600061136d858286016112d5565b925050602061137e85828601611333565b9150509250929050565b60006020828403121561139e5761139d6112af565b5b60006113ac84828501611333565b91505092915050565b600080604083850312156113cc576113cb6112af565b5b60006113da85828601611333565b92505060206113eb85828601611333565b9150509250929050565b6113fe816112b4565b82525050565b600060208201905061141960008301846113f5565b92915050565b6114288161130a565b82525050565b6000602082019050611443600083018461141f565b92915050565b60006020828403121561145f5761145e6112af565b5b600061146d848285016112d5565b91505092915050565b6000819050919050565b600061149b611496611491846112ea565b611476565b6112ea565b9050919050565b60006114ad82611480565b9050919050565b60006114bf826114a2565b9050919050565b6114cf816114b4565b82525050565b60006020820190506114ea60008301846114c6565b92915050565b60008115159050919050565b611505816114f0565b82525050565b600060208201905061152060008301846114fc565b92915050565b600060408201905061153b60008301856113f5565b61154860208301846113f5565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b6000611596601e8361154f565b91506115a182611560565b602082019050919050565b600060208201905081810360008301526115c581611589565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b6000611602601f8361154f565b915061160d826115cc565b602082019050919050565b60006020820190508181036000830152611631816115f5565b9050919050565b600060608201905061164d600083018661141f565b61165a602083018561141f565b61166760408301846113f5565b949350505050565b611678816114f0565b811461168357600080fd5b50565b6000815190506116958161166f565b92915050565b6000602082840312156116b1576116b06112af565b5b60006116bf84828501611686565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611702826112b4565b915061170d836112b4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611742576117416116c8565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b60018511156117a4578086048111156117805761177f6116c8565b5b600185161561178f5780820291505b808102905061179d8561174d565b9450611764565b94509492505050565b6000826117bd5760019050611879565b816117cb5760009050611879565b81600181146117e157600281146117eb5761181a565b6001915050611879565b60ff8411156117fd576117fc6116c8565b5b8360020a915084821115611814576118136116c8565b5b50611879565b5060208310610133831016604e8410600b841016171561184f5782820a90508381111561184a576118496116c8565b5b611879565b61185c848484600161175a565b92509050818404811115611873576118726116c8565b5b81810290505b9392505050565b600061188b826112b4565b9150611896836112b4565b92506118c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846117ad565b905092915050565b60006118d6826112b4565b91506118e1836112b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561191a576119196116c8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061195f826112b4565b915061196a836112b4565b92508261197a57611979611925565b5b828204905092915050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b60006119bb601b8361154f565b91506119c682611985565b602082019050919050565b600060208201905081810360008301526119ea816119ae565b9050919050565b6000604082019050611a06600083018561141f565b611a1360208301846113f5565b9392505050565b6000611a25826112b4565b91506000821415611a3957611a386116c8565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611a7e826112b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ab157611ab06116c8565b5b600182019050919050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000611af260118361154f565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b600069ffffffffffffffffffff82169050919050565b611b4781611b28565b8114611b5257600080fd5b50565b600081519050611b6481611b3e565b92915050565b6000819050919050565b611b7d81611b6a565b8114611b8857600080fd5b50565b600081519050611b9a81611b74565b92915050565b600081519050611baf816112be565b92915050565b600080600080600060a08688031215611bd157611bd06112af565b5b6000611bdf88828901611b55565b9550506020611bf088828901611b8b565b9450506040611c0188828901611ba0565b9350506060611c1288828901611ba0565b9250506080611c2388828901611b55565b9150509295509295909350565b600060ff82169050919050565b611c4681611c30565b8114611c5157600080fd5b50565b600081519050611c6381611c3d565b92915050565b600060208284031215611c7f57611c7e6112af565b5b6000611c8d84828501611c54565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cf260268361154f565b9150611cfd82611c96565b604082019050919050565b60006020820190508181036000830152611d2181611ce5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d5e60208361154f565b9150611d6982611d28565b602082019050919050565b60006020820190508181036000830152611d8d81611d51565b905091905056fea2646970667358221220a71920cf8e718410936cc2f8021a8988aa7ec17fb39da70b7a48c1df4d82243f64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b83e023411610071578063b83e0234146102cb578063dd5b8467146102fb578063f1c5d6c21461032b578063f2fde38b1461035c578063fd5e6dd11461037857610116565b8063715018a614610257578063877dd39d146102615780638da5cb5b1461027d578063af3f5e221461029b57610116565b806329161a00116100e957806329161a00146101b35780632d1ad8b8146101e35780635e5f2e26146101ff5780635eb186f81461022f57806360ab58521461024d57610116565b80630bea440d1461011b578063171e44ea14610137578063276b11da1461015357806327927b3e14610183575b600080fd5b61013560048036038101906101309190611348565b6103a8565b005b610151600480360381019061014c9190611388565b610610565b005b61016d600480360381019061016891906113b5565b61067e565b60405161017a9190611404565b60405180910390f35b61019d60048036038101906101989190611388565b610789565b6040516101aa919061142e565b60405180910390f35b6101cd60048036038101906101c891906113b5565b6107bc565b6040516101da9190611404565b60405180910390f35b6101fd60048036038101906101f89190611388565b6107e1565b005b61021960048036038101906102149190611449565b610a0e565b604051610226919061142e565b60405180910390f35b610237610a4d565b60405161024491906114d5565b60405180910390f35b610255610a73565b005b61025f610ba3565b005b61027b600480360381019061027691906113b5565b610bb7565b005b610285610c41565b604051610292919061142e565b60405180910390f35b6102b560048036038101906102b09190611388565b610c6a565b6040516102c29190611404565b60405180910390f35b6102e560048036038101906102e09190611388565b610d75565b6040516102f29190611404565b60405180910390f35b61031560048036038101906103109190611388565b610d8d565b604051610322919061150b565b60405180910390f35b61034560048036038101906103409190611388565b610e3c565b604051610353929190611526565b60405180910390f35b61037660048036038101906103719190611388565b610fc2565b005b610392600480360381019061038d9190611449565b611046565b60405161039f919061142e565b60405180910390f35b600082116103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e2906115ac565b60405180910390fd5b6103f481610d8d565b610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90611618565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161047093929190611638565b602060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c2919061169b565b506104cd3382611085565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055991906116f7565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561060c576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b610618611165565b6005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116106cf5760009050610783565b6000806106db84610e3c565b9150915080600a6106ec9190611880565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461077491906118cb565b61077e9190611954565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c906119d1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108e09291906119f1565b602060405180830381600087803b1580156108fa57600080fd5b505af115801561090e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610932919061169b565b506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610a0590611a1a565b91905055505050565b60058181548110610a1e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a7b611165565b60005b600480549050811015610ba057600060048281548110610aa157610aa0611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610ad982610c6a565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610b389291906119f1565b602060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a919061169b565b5050508080610b9890611a73565b915050610a7e565b50565b610bab611165565b610bb560006111e3565b565b610bbf611165565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea90611b08565b60405180910390fd5b60005b600580549050811015610d6b57610d4b8460058381548110610d1b57610d1a611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661067e565b82610d5691906116f7565b91508080610d6390611a73565b915050610cf6565b5080915050919050565b60026020528060005260406000206000915090505481565b600080600090505b600580549050811015610e315760058181548110610db657610db5611a44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e1e576001915050610e37565b8080610e2990611a73565b915050610d95565b50600090505b919050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ef057600080fd5b505afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190611bb5565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7657600080fd5b505afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190611c69565b60ff16905081819550955050505050915091565b610fca611165565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103190611d08565b60405180910390fd5b611043816111e3565b50565b6004818154811061105657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611161576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461115991906116f7565b925050819055505b5050565b61116d6112a7565b73ffffffffffffffffffffffffffffffffffffffff1661118b610c41565b73ffffffffffffffffffffffffffffffffffffffff16146111e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d890611d74565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6112c7816112b4565b81146112d257600080fd5b50565b6000813590506112e4816112be565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611315826112ea565b9050919050565b6113258161130a565b811461133057600080fd5b50565b6000813590506113428161131c565b92915050565b6000806040838503121561135f5761135e6112af565b5b600061136d858286016112d5565b925050602061137e85828601611333565b9150509250929050565b60006020828403121561139e5761139d6112af565b5b60006113ac84828501611333565b91505092915050565b600080604083850312156113cc576113cb6112af565b5b60006113da85828601611333565b92505060206113eb85828601611333565b9150509250929050565b6113fe816112b4565b82525050565b600060208201905061141960008301846113f5565b92915050565b6114288161130a565b82525050565b6000602082019050611443600083018461141f565b92915050565b60006020828403121561145f5761145e6112af565b5b600061146d848285016112d5565b91505092915050565b6000819050919050565b600061149b611496611491846112ea565b611476565b6112ea565b9050919050565b60006114ad82611480565b9050919050565b60006114bf826114a2565b9050919050565b6114cf816114b4565b82525050565b60006020820190506114ea60008301846114c6565b92915050565b60008115159050919050565b611505816114f0565b82525050565b600060208201905061152060008301846114fc565b92915050565b600060408201905061153b60008301856113f5565b61154860208301846113f5565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b6000611596601e8361154f565b91506115a182611560565b602082019050919050565b600060208201905081810360008301526115c581611589565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b6000611602601f8361154f565b915061160d826115cc565b602082019050919050565b60006020820190508181036000830152611631816115f5565b9050919050565b600060608201905061164d600083018661141f565b61165a602083018561141f565b61166760408301846113f5565b949350505050565b611678816114f0565b811461168357600080fd5b50565b6000815190506116958161166f565b92915050565b6000602082840312156116b1576116b06112af565b5b60006116bf84828501611686565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611702826112b4565b915061170d836112b4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611742576117416116c8565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b60018511156117a4578086048111156117805761177f6116c8565b5b600185161561178f5780820291505b808102905061179d8561174d565b9450611764565b94509492505050565b6000826117bd5760019050611879565b816117cb5760009050611879565b81600181146117e157600281146117eb5761181a565b6001915050611879565b60ff8411156117fd576117fc6116c8565b5b8360020a915084821115611814576118136116c8565b5b50611879565b5060208310610133831016604e8410600b841016171561184f5782820a90508381111561184a576118496116c8565b5b611879565b61185c848484600161175a565b92509050818404811115611873576118726116c8565b5b81810290505b9392505050565b600061188b826112b4565b9150611896836112b4565b92506118c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846117ad565b905092915050565b60006118d6826112b4565b91506118e1836112b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561191a576119196116c8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061195f826112b4565b915061196a836112b4565b92508261197a57611979611925565b5b828204905092915050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b60006119bb601b8361154f565b91506119c682611985565b602082019050919050565b600060208201905081810360008301526119ea816119ae565b9050919050565b6000604082019050611a06600083018561141f565b611a1360208301846113f5565b9392505050565b6000611a25826112b4565b91506000821415611a3957611a386116c8565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611a7e826112b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ab157611ab06116c8565b5b600182019050919050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000611af260118361154f565b9150611afd82611abc565b602082019050919050565b60006020820190508181036000830152611b2181611ae5565b9050919050565b600069ffffffffffffffffffff82169050919050565b611b4781611b28565b8114611b5257600080fd5b50565b600081519050611b6481611b3e565b92915050565b6000819050919050565b611b7d81611b6a565b8114611b8857600080fd5b50565b600081519050611b9a81611b74565b92915050565b600081519050611baf816112be565b92915050565b600080600080600060a08688031215611bd157611bd06112af565b5b6000611bdf88828901611b55565b9550506020611bf088828901611b8b565b9450506040611c0188828901611ba0565b9350506060611c1288828901611ba0565b9250506080611c2388828901611b55565b9150509295509295909350565b600060ff82169050919050565b611c4681611c30565b8114611c5157600080fd5b50565b600081519050611c6381611c3d565b92915050565b600060208284031215611c7f57611c7e6112af565b5b6000611c8d84828501611c54565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cf260268361154f565b9150611cfd82611c96565b604082019050919050565b60006020820190508181036000830152611d2181611ce5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d5e60208361154f565b9150611d6982611d28565b602082019050919050565b60006020820190508181036000830152611d8d81611d51565b905091905056fea2646970667358221220a71920cf8e718410936cc2f8021a8988aa7ec17fb39da70b7a48c1df4d82243f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 902,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 906,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 910,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "tokenPriceFeedMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 913,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 916,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 919,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)822"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}