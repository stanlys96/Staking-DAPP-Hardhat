{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dappTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "TokenFarm__AddressLessThan1DayForDappToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToDaiReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToDappReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToLastGetDappToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToWethReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get10DappToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserSingleTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setDaiTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setDappTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setWethTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd089366eed792c83108ae90f58166191a9f3832bd42c291351f15f995369e760",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2815033",
    "logsBloom": "0x
    "blockHash": "0x8de2eca0aa205caa2ddfbf663801293d8bd454928b07c41b8c90a2390ac408af",
    "transactionHash": "0xd089366eed792c83108ae90f58166191a9f3832bd42c291351f15f995369e760",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xd089366eed792c83108ae90f58166191a9f3832bd42c291351f15f995369e760",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8de2eca0aa205caa2ddfbf663801293d8bd454928b07c41b8c90a2390ac408af"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "2815033",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "96bca47eed6f438e14d5e455edc3c696",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"TokenFarm__AddressLessThan1DayForDappToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToDaiReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToDappReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToLastGetDappToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToWethReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get10DappToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserSingleTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDaiTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDappTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWethTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror TokenFarm__AddressLessThan1DayForDappToken(address spender);\\n\\ncontract TokenFarm is Ownable {\\n    // mapping token address -> staker address -> amount\\n    mapping(address => mapping(address => uint256)) public stakingBalance;\\n    mapping(address => uint256) public uniqueTokensStaked;\\n    mapping(address => address) public tokenPriceFeedMapping;\\n    mapping(address => uint256) public addressToLastGetDappToken;\\n    mapping(address => uint256) public addressToDappReward;\\n    mapping(address => uint256) public addressToWethReward;\\n    mapping(address => uint256) public addressToDaiReward;\\n    address[] public stakers;\\n    address[] public allowedTokens;\\n    address public dappTokenAddress;\\n    address public wethTokenAddress;\\n    address public daiTokenAddress;\\n    IERC20 public dappToken;\\n\\n    constructor(address _dappTokenAddress) {\\n        dappToken = IERC20(_dappTokenAddress);\\n    }\\n\\n    function setPriceFeedContract(address _token, address _priceFeed)\\n        public\\n        onlyOwner\\n    {\\n        bool foundToken = false;\\n        uint256 allowedTokensLength = allowedTokens.length;\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            if (allowedTokens[index] == _token) {\\n                foundToken = true;\\n                break;\\n            }\\n        }\\n        if (!foundToken) {\\n            allowedTokens.push(_token);\\n        }\\n        tokenPriceFeedMapping[_token] = _priceFeed;\\n    }\\n\\n    function getUserTotalValue(address _user) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        require(uniqueTokensStaked[_user] > 0, \\\"No tokens staked!\\\");\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            totalValue += getUserSingleTokenValue(_user, allowedTokens[i]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getUserSingleTokenValue(address _user, address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (uniqueTokensStaked[_user] <= 0) {\\n            return 0;\\n        }\\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\\n        return ((stakingBalance[_token][_user] * price) / (10**decimals));\\n    }\\n\\n    function getTokenValue(address _token)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            priceFeedAddress\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 decimals = uint256(priceFeed.decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    function stakeTokens(uint256 _amount, address _token) public {\\n        require(_amount > 0, \\\"Amount must be more than zero!\\\");\\n        require(tokenIsAllowed(_token), \\\"Token is currently not allowed!\\\");\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        updateUniqueTokensStaked(msg.sender, _token);\\n        stakingBalance[_token][msg.sender] += _amount;\\n        if (uniqueTokensStaked[msg.sender] == 1) {\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    function unstakeTokens(address _token, uint256 _amount) public {\\n        uint256 balance = stakingBalance[_token][msg.sender];\\n        require(balance > 0, \\\"Staking balance cannot be 0\\\");\\n        require(\\n            stakingBalance[_token][msg.sender] - _amount >= 0,\\n            \\\"balance - amount unstaked must be more than or equal to zero\\\"\\n        );\\n        IERC20(_token).transfer(msg.sender, _amount);\\n        stakingBalance[_token][msg.sender] -= _amount;\\n        if (stakingBalance[_token][msg.sender] == 0) {\\n            uniqueTokensStaked[msg.sender]--;\\n            if (uniqueTokensStaked[msg.sender] == 0) {\\n                for (uint256 index = 0; index < stakers.length; index++) {\\n                    if (stakers[index] == msg.sender) {\\n                        if (index >= stakers.length) return;\\n\\n                        for (uint i = index; i < stakers.length - 1; i++) {\\n                            stakers[i] = stakers[i + 1];\\n                        }\\n                        stakers.pop();\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function updateUniqueTokensStaked(address _user, address _token) internal {\\n        if (stakingBalance[_token][_user] <= 0) {\\n            uniqueTokensStaked[_user] += 1;\\n        }\\n    }\\n\\n    function tokenIsAllowed(address _token) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (_token == allowedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function get10DappToken() public {\\n        if (block.timestamp - addressToLastGetDappToken[msg.sender] < 1 days) {\\n            revert TokenFarm__AddressLessThan1DayForDappToken(msg.sender);\\n        }\\n        addressToLastGetDappToken[msg.sender] = block.timestamp;\\n        dappToken.transfer(msg.sender, 10000000000000000000);\\n    }\\n\\n    function issueRewards() public {\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            for (uint256 j = 0; j < allowedTokens.length; j++) {\\n                if (stakingBalance[allowedTokens[j]][stakers[i]] > 0) {\\n                    uint256 reward = getUserSingleTokenValue(\\n                        stakers[i],\\n                        allowedTokens[j]\\n                    );\\n                    if (allowedTokens[j] == dappTokenAddress) {\\n                        addressToDappReward[msg.sender] += reward;\\n                    }\\n                    if (allowedTokens[j] == wethTokenAddress) {\\n                        addressToWethReward[msg.sender] += reward;\\n                    }\\n                    if (allowedTokens[j] == daiTokenAddress) {\\n                        addressToDaiReward[msg.sender] += reward;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdrawReward(address _token) public {\\n        if (_token == dappTokenAddress) {\\n            uint256 totalTokenReward = addressToDappReward[msg.sender];\\n            addressToDappReward[msg.sender] = 0;\\n            dappToken.transfer(msg.sender, totalTokenReward);\\n        }\\n        if (_token == wethTokenAddress) {\\n            uint256 totalTokenReward = addressToWethReward[msg.sender];\\n            addressToWethReward[msg.sender] = 0;\\n            dappToken.transfer(msg.sender, totalTokenReward);\\n        }\\n        if (_token == daiTokenAddress) {\\n            uint256 totalTokenReward = addressToDaiReward[msg.sender];\\n            addressToDaiReward[msg.sender] = 0;\\n            dappToken.transfer(msg.sender, totalTokenReward);\\n        }\\n    }\\n\\n    function setDappTokenAddress(address _address) external onlyOwner {\\n        dappTokenAddress = _address;\\n    }\\n\\n    function setWethTokenAddress(address _address) external onlyOwner {\\n        wethTokenAddress = _address;\\n    }\\n\\n    function setDaiTokenAddress(address _address) external onlyOwner {\\n        daiTokenAddress = _address;\\n    }\\n}\\n\",\"keccak256\":\"0xea5896752d41727386a7d15deb99dc9683c2a87331ad4c638e4e09ccb097171e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200332d3803806200332d8339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61311680620002176000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063877dd39d11610104578063b86e321c116100a2578063f1326b1511610071578063f1326b1514610540578063f1c5d6c21461055c578063f2fde38b1461058d578063fd5e6dd1146105a9576101cf565b8063b86e321c146104a8578063db6a34d9146104c4578063dd5b8467146104f4578063e89a173e14610524576101cf565b8063a33c9b7a116100de578063a33c9b7a1461040e578063af3f5e221461043e578063b0370e0c1461046e578063b83e023414610478576101cf565b8063877dd39d146103b65780638da5cb5b146103d25780639f0a6526146103f0576101cf565b806348be2fab1161017157806367d55c841161014b57806367d55c84146103565780636acc977714610386578063715018a6146103a25780638144fee0146103ac576101cf565b806348be2fab146102ec5780635e5f2e26146103085780635eb186f814610338576101cf565b806327927b3e116101ad57806327927b3e1461023e57806329161a001461026e5780632eaee35e1461029e578063387ad87c146102bc576101cf565b80630bea440d146101d45780630f9dad71146101f0578063276b11da1461020e575b600080fd5b6101ee60048036038101906101e991906124fb565b6105d9565b005b6101f8610841565b604051610205919061254a565b60405180910390f35b61022860048036038101906102239190612565565b610867565b60405161023591906125b4565b60405180910390f35b610258600480360381019061025391906125cf565b610972565b604051610265919061254a565b60405180910390f35b61028860048036038101906102839190612565565b6109a5565b60405161029591906125b4565b60405180910390f35b6102a66109ca565b6040516102b3919061254a565b60405180910390f35b6102d660048036038101906102d191906125cf565b6109f0565b6040516102e391906125b4565b60405180910390f35b610306600480360381019061030191906125cf565b610a08565b005b610322600480360381019061031d91906125fc565b610a54565b60405161032f919061254a565b60405180910390f35b610340610a93565b60405161034d9190612688565b60405180910390f35b610370600480360381019061036b91906125cf565b610ab9565b60405161037d91906125b4565b60405180910390f35b6103a0600480360381019061039b91906125cf565b610ad1565b005b6103aa610b1d565b005b6103b4610b31565b005b6103d060048036038101906103cb9190612565565b610cc1565b005b6103da610e5b565b6040516103e7919061254a565b60405180910390f35b6103f8610e84565b604051610405919061254a565b60405180910390f35b610428600480360381019061042391906125cf565b610eaa565b60405161043591906125b4565b60405180910390f35b610458600480360381019061045391906125cf565b610ec2565b60405161046591906125b4565b60405180910390f35b610476610fcd565b005b610492600480360381019061048d91906125cf565b611465565b60405161049f91906125b4565b60405180910390f35b6104c260048036038101906104bd91906125cf565b61147d565b005b6104de60048036038101906104d991906125cf565b611933565b6040516104eb91906125b4565b60405180910390f35b61050e600480360381019061050991906125cf565b61194b565b60405161051b91906126be565b60405180910390f35b61053e600480360381019061053991906126d9565b6119fa565b005b61055a600480360381019061055591906125cf565b611fa3565b005b610576600480360381019061057191906125cf565b611fef565b604051610584929190612719565b60405180910390f35b6105a760048036038101906105a291906125cf565b612175565b005b6105c360048036038101906105be91906125fc565b6121f9565b6040516105d0919061254a565b60405180910390f35b6000821161061c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106139061279f565b60405180910390fd5b6106258161194b565b610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b9061280b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016106a19392919061282b565b602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f3919061288e565b506106fe3382612238565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a91906128ea565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561083d576008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108b8576000905061096c565b6000806108c484611fef565b9150915080600a6108d59190612a73565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095d9190612abe565b6109679190612b47565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b610a10612318565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60098181548110610a6457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b610ad9612318565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b25612318565b610b2f6000612396565b565b62015180600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610b809190612b78565b1015610bc357336040517f64187f0e000000000000000000000000000000000000000000000000000000008152600401610bba919061254a565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33678ac7230489e800006040518363ffffffff1660e01b8152600401610c6c929190612be7565b602060405180830381600087803b158015610c8657600080fd5b505af1158015610c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbe919061288e565b50565b610cc9612318565b600080600980549050905060005b81811015610d6d578473ffffffffffffffffffffffffffffffffffffffff1660098281548110610d0a57610d09612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d5a5760019250610d6d565b8080610d6590612c3f565b915050610cd7565b5081610dd7576009849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290612cd4565b60405180910390fd5b60005b600980549050811015610fc357610fa38460098381548110610f7357610f72612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610867565b82610fae91906128ea565b91508080610fbb90612c3f565b915050610f4e565b5080915050919050565b60005b6008805490508110156114625760005b60098054905081101561144e576000600160006009848154811061100757611006612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008858154811061108257611081612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561143b5760006111766008848154811061110757611106612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009848154811061114657611145612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610867565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600983815481106111c5576111c4612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112635780600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461125b91906128ea565b925050819055505b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600983815481106112b0576112af612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561134e5780600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461134691906128ea565b925050819055505b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166009838154811061139b5761139a612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114395780600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461143191906128ea565b925050819055505b505b808061144690612c3f565b915050610fe0565b50808061145a90612c3f565b915050610fd0565b50565b60026020528060005260406000206000915090505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561160e576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016115b9929190612cf4565b602060405180830381600087803b1580156115d357600080fd5b505af11580156115e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160b919061288e565b50505b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561179f576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161174a929190612cf4565b602060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c919061288e565b50505b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611930576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016118db929190612cf4565b602060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192d919061288e565b50505b50565b60056020528060005260406000206000915090505481565b600080600090505b6009805490508110156119ef576009818154811061197457611973612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119dc5760019150506119f5565b80806119e790612c3f565b915050611953565b50600090505b919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab590612d69565b60405180910390fd5b600082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b489190612b78565b1015611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8090612dfb565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611bc4929190612cf4565b602060405180830381600087803b158015611bde57600080fd5b505af1158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c16919061288e565b5081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca39190612b78565b925050819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611f9d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611d7f90612e1b565b91905055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611f9c5760005b600880549050811015611f9a573373ffffffffffffffffffffffffffffffffffffffff1660088281548110611e0757611e06612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f87576008805490508110611e61575050611f9f565b60008190505b6001600880549050611e799190612b78565b811015611f3a576008600182611e8f91906128ea565b81548110611ea057611e9f612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660088281548110611edf57611ede612c10565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080611f3290612c3f565b915050611e67565b506008805480611f4d57611f4c612e45565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611f9a565b8080611f9290612c3f565b915050611dcf565b505b5b505b5050565b611fab612318565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190612f01565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561212957600080fd5b505afa15801561213d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121619190612fb5565b60ff16905081819550955050505050915091565b61217d612318565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e490613054565b60405180910390fd5b6121f681612396565b50565b6008818154811061220957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612314576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461230c91906128ea565b925050819055505b5050565b61232061245a565b73ffffffffffffffffffffffffffffffffffffffff1661233e610e5b565b73ffffffffffffffffffffffffffffffffffffffff1614612394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238b906130c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b61247a81612467565b811461248557600080fd5b50565b60008135905061249781612471565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124c88261249d565b9050919050565b6124d8816124bd565b81146124e357600080fd5b50565b6000813590506124f5816124cf565b92915050565b6000806040838503121561251257612511612462565b5b600061252085828601612488565b9250506020612531858286016124e6565b9150509250929050565b612544816124bd565b82525050565b600060208201905061255f600083018461253b565b92915050565b6000806040838503121561257c5761257b612462565b5b600061258a858286016124e6565b925050602061259b858286016124e6565b9150509250929050565b6125ae81612467565b82525050565b60006020820190506125c960008301846125a5565b92915050565b6000602082840312156125e5576125e4612462565b5b60006125f3848285016124e6565b91505092915050565b60006020828403121561261257612611612462565b5b600061262084828501612488565b91505092915050565b6000819050919050565b600061264e6126496126448461249d565b612629565b61249d565b9050919050565b600061266082612633565b9050919050565b600061267282612655565b9050919050565b61268281612667565b82525050565b600060208201905061269d6000830184612679565b92915050565b60008115159050919050565b6126b8816126a3565b82525050565b60006020820190506126d360008301846126af565b92915050565b600080604083850312156126f0576126ef612462565b5b60006126fe858286016124e6565b925050602061270f85828601612488565b9150509250929050565b600060408201905061272e60008301856125a5565b61273b60208301846125a5565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b6000612789601e83612742565b915061279482612753565b602082019050919050565b600060208201905081810360008301526127b88161277c565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b60006127f5601f83612742565b9150612800826127bf565b602082019050919050565b60006020820190508181036000830152612824816127e8565b9050919050565b6000606082019050612840600083018661253b565b61284d602083018561253b565b61285a60408301846125a5565b949350505050565b61286b816126a3565b811461287657600080fd5b50565b60008151905061288881612862565b92915050565b6000602082840312156128a4576128a3612462565b5b60006128b284828501612879565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128f582612467565b915061290083612467565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612935576129346128bb565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561299757808604811115612973576129726128bb565b5b60018516156129825780820291505b808102905061299085612940565b9450612957565b94509492505050565b6000826129b05760019050612a6c565b816129be5760009050612a6c565b81600181146129d457600281146129de57612a0d565b6001915050612a6c565b60ff8411156129f0576129ef6128bb565b5b8360020a915084821115612a0757612a066128bb565b5b50612a6c565b5060208310610133831016604e8410600b8410161715612a425782820a905083811115612a3d57612a3c6128bb565b5b612a6c565b612a4f848484600161294d565b92509050818404811115612a6657612a656128bb565b5b81810290505b9392505050565b6000612a7e82612467565b9150612a8983612467565b9250612ab67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846129a0565b905092915050565b6000612ac982612467565b9150612ad483612467565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b0d57612b0c6128bb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b5282612467565b9150612b5d83612467565b925082612b6d57612b6c612b18565b5b828204905092915050565b6000612b8382612467565b9150612b8e83612467565b925082821015612ba157612ba06128bb565b5b828203905092915050565b6000819050919050565b6000612bd1612bcc612bc784612bac565b612629565b612467565b9050919050565b612be181612bb6565b82525050565b6000604082019050612bfc600083018561253b565b612c096020830184612bd8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612c4a82612467565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c7d57612c7c6128bb565b5b600182019050919050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000612cbe601183612742565b9150612cc982612c88565b602082019050919050565b60006020820190508181036000830152612ced81612cb1565b9050919050565b6000604082019050612d09600083018561253b565b612d1660208301846125a5565b9392505050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b6000612d53601b83612742565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b7f62616c616e6365202d20616d6f756e7420756e7374616b6564206d757374206260008201527f65206d6f7265207468616e206f7220657175616c20746f207a65726f00000000602082015250565b6000612de5603c83612742565b9150612df082612d89565b604082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b6000612e2682612467565b91506000821415612e3a57612e396128bb565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600069ffffffffffffffffffff82169050919050565b612e9381612e74565b8114612e9e57600080fd5b50565b600081519050612eb081612e8a565b92915050565b6000819050919050565b612ec981612eb6565b8114612ed457600080fd5b50565b600081519050612ee681612ec0565b92915050565b600081519050612efb81612471565b92915050565b600080600080600060a08688031215612f1d57612f1c612462565b5b6000612f2b88828901612ea1565b9550506020612f3c88828901612ed7565b9450506040612f4d88828901612eec565b9350506060612f5e88828901612eec565b9250506080612f6f88828901612ea1565b9150509295509295909350565b600060ff82169050919050565b612f9281612f7c565b8114612f9d57600080fd5b50565b600081519050612faf81612f89565b92915050565b600060208284031215612fcb57612fca612462565b5b6000612fd984828501612fa0565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061303e602683612742565b915061304982612fe2565b604082019050919050565b6000602082019050818103600083015261306d81613031565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130aa602083612742565b91506130b582613074565b602082019050919050565b600060208201905081810360008301526130d98161309d565b905091905056fea2646970667358221220fd3340581b1b96e5959c81f703a190f9c199d4c3c815fdb90b6edcf36c1db48f64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063877dd39d11610104578063b86e321c116100a2578063f1326b1511610071578063f1326b1514610540578063f1c5d6c21461055c578063f2fde38b1461058d578063fd5e6dd1146105a9576101cf565b8063b86e321c146104a8578063db6a34d9146104c4578063dd5b8467146104f4578063e89a173e14610524576101cf565b8063a33c9b7a116100de578063a33c9b7a1461040e578063af3f5e221461043e578063b0370e0c1461046e578063b83e023414610478576101cf565b8063877dd39d146103b65780638da5cb5b146103d25780639f0a6526146103f0576101cf565b806348be2fab1161017157806367d55c841161014b57806367d55c84146103565780636acc977714610386578063715018a6146103a25780638144fee0146103ac576101cf565b806348be2fab146102ec5780635e5f2e26146103085780635eb186f814610338576101cf565b806327927b3e116101ad57806327927b3e1461023e57806329161a001461026e5780632eaee35e1461029e578063387ad87c146102bc576101cf565b80630bea440d146101d45780630f9dad71146101f0578063276b11da1461020e575b600080fd5b6101ee60048036038101906101e991906124fb565b6105d9565b005b6101f8610841565b604051610205919061254a565b60405180910390f35b61022860048036038101906102239190612565565b610867565b60405161023591906125b4565b60405180910390f35b610258600480360381019061025391906125cf565b610972565b604051610265919061254a565b60405180910390f35b61028860048036038101906102839190612565565b6109a5565b60405161029591906125b4565b60405180910390f35b6102a66109ca565b6040516102b3919061254a565b60405180910390f35b6102d660048036038101906102d191906125cf565b6109f0565b6040516102e391906125b4565b60405180910390f35b610306600480360381019061030191906125cf565b610a08565b005b610322600480360381019061031d91906125fc565b610a54565b60405161032f919061254a565b60405180910390f35b610340610a93565b60405161034d9190612688565b60405180910390f35b610370600480360381019061036b91906125cf565b610ab9565b60405161037d91906125b4565b60405180910390f35b6103a0600480360381019061039b91906125cf565b610ad1565b005b6103aa610b1d565b005b6103b4610b31565b005b6103d060048036038101906103cb9190612565565b610cc1565b005b6103da610e5b565b6040516103e7919061254a565b60405180910390f35b6103f8610e84565b604051610405919061254a565b60405180910390f35b610428600480360381019061042391906125cf565b610eaa565b60405161043591906125b4565b60405180910390f35b610458600480360381019061045391906125cf565b610ec2565b60405161046591906125b4565b60405180910390f35b610476610fcd565b005b610492600480360381019061048d91906125cf565b611465565b60405161049f91906125b4565b60405180910390f35b6104c260048036038101906104bd91906125cf565b61147d565b005b6104de60048036038101906104d991906125cf565b611933565b6040516104eb91906125b4565b60405180910390f35b61050e600480360381019061050991906125cf565b61194b565b60405161051b91906126be565b60405180910390f35b61053e600480360381019061053991906126d9565b6119fa565b005b61055a600480360381019061055591906125cf565b611fa3565b005b610576600480360381019061057191906125cf565b611fef565b604051610584929190612719565b60405180910390f35b6105a760048036038101906105a291906125cf565b612175565b005b6105c360048036038101906105be91906125fc565b6121f9565b6040516105d0919061254a565b60405180910390f35b6000821161061c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106139061279f565b60405180910390fd5b6106258161194b565b610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b9061280b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016106a19392919061282b565b602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f3919061288e565b506106fe3382612238565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a91906128ea565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561083d576008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108b8576000905061096c565b6000806108c484611fef565b9150915080600a6108d59190612a73565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461095d9190612abe565b6109679190612b47565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b610a10612318565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60098181548110610a6457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915090505481565b610ad9612318565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b25612318565b610b2f6000612396565b565b62015180600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610b809190612b78565b1015610bc357336040517f64187f0e000000000000000000000000000000000000000000000000000000008152600401610bba919061254a565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33678ac7230489e800006040518363ffffffff1660e01b8152600401610c6c929190612be7565b602060405180830381600087803b158015610c8657600080fd5b505af1158015610c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbe919061288e565b50565b610cc9612318565b600080600980549050905060005b81811015610d6d578473ffffffffffffffffffffffffffffffffffffffff1660098281548110610d0a57610d09612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d5a5760019250610d6d565b8080610d6590612c3f565b915050610cd7565b5081610dd7576009849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290612cd4565b60405180910390fd5b60005b600980549050811015610fc357610fa38460098381548110610f7357610f72612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610867565b82610fae91906128ea565b91508080610fbb90612c3f565b915050610f4e565b5080915050919050565b60005b6008805490508110156114625760005b60098054905081101561144e576000600160006009848154811061100757611006612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006008858154811061108257611081612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561143b5760006111766008848154811061110757611106612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009848154811061114657611145612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610867565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600983815481106111c5576111c4612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112635780600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461125b91906128ea565b925050819055505b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600983815481106112b0576112af612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561134e5780600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461134691906128ea565b925050819055505b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166009838154811061139b5761139a612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114395780600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461143191906128ea565b925050819055505b505b808061144690612c3f565b915050610fe0565b50808061145a90612c3f565b915050610fd0565b50565b60026020528060005260406000206000915090505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561160e576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016115b9929190612cf4565b602060405180830381600087803b1580156115d357600080fd5b505af11580156115e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160b919061288e565b50505b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561179f576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161174a929190612cf4565b602060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c919061288e565b50505b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611930576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016118db929190612cf4565b602060405180830381600087803b1580156118f557600080fd5b505af1158015611909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192d919061288e565b50505b50565b60056020528060005260406000206000915090505481565b600080600090505b6009805490508110156119ef576009818154811061197457611973612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119dc5760019150506119f5565b80806119e790612c3f565b915050611953565b50600090505b919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab590612d69565b60405180910390fd5b600082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b489190612b78565b1015611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8090612dfb565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611bc4929190612cf4565b602060405180830381600087803b158015611bde57600080fd5b505af1158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c16919061288e565b5081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca39190612b78565b925050819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611f9d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611d7f90612e1b565b91905055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611f9c5760005b600880549050811015611f9a573373ffffffffffffffffffffffffffffffffffffffff1660088281548110611e0757611e06612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f87576008805490508110611e61575050611f9f565b60008190505b6001600880549050611e799190612b78565b811015611f3a576008600182611e8f91906128ea565b81548110611ea057611e9f612c10565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660088281548110611edf57611ede612c10565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080611f3290612c3f565b915050611e67565b506008805480611f4d57611f4c612e45565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611f9a565b8080611f9290612c3f565b915050611dcf565b505b5b505b5050565b611fab612318565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156120a357600080fd5b505afa1580156120b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120db9190612f01565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561212957600080fd5b505afa15801561213d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121619190612fb5565b60ff16905081819550955050505050915091565b61217d612318565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e490613054565b60405180910390fd5b6121f681612396565b50565b6008818154811061220957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411612314576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461230c91906128ea565b925050819055505b5050565b61232061245a565b73ffffffffffffffffffffffffffffffffffffffff1661233e610e5b565b73ffffffffffffffffffffffffffffffffffffffff1614612394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238b906130c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b61247a81612467565b811461248557600080fd5b50565b60008135905061249781612471565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124c88261249d565b9050919050565b6124d8816124bd565b81146124e357600080fd5b50565b6000813590506124f5816124cf565b92915050565b6000806040838503121561251257612511612462565b5b600061252085828601612488565b9250506020612531858286016124e6565b9150509250929050565b612544816124bd565b82525050565b600060208201905061255f600083018461253b565b92915050565b6000806040838503121561257c5761257b612462565b5b600061258a858286016124e6565b925050602061259b858286016124e6565b9150509250929050565b6125ae81612467565b82525050565b60006020820190506125c960008301846125a5565b92915050565b6000602082840312156125e5576125e4612462565b5b60006125f3848285016124e6565b91505092915050565b60006020828403121561261257612611612462565b5b600061262084828501612488565b91505092915050565b6000819050919050565b600061264e6126496126448461249d565b612629565b61249d565b9050919050565b600061266082612633565b9050919050565b600061267282612655565b9050919050565b61268281612667565b82525050565b600060208201905061269d6000830184612679565b92915050565b60008115159050919050565b6126b8816126a3565b82525050565b60006020820190506126d360008301846126af565b92915050565b600080604083850312156126f0576126ef612462565b5b60006126fe858286016124e6565b925050602061270f85828601612488565b9150509250929050565b600060408201905061272e60008301856125a5565b61273b60208301846125a5565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b6000612789601e83612742565b915061279482612753565b602082019050919050565b600060208201905081810360008301526127b88161277c565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b60006127f5601f83612742565b9150612800826127bf565b602082019050919050565b60006020820190508181036000830152612824816127e8565b9050919050565b6000606082019050612840600083018661253b565b61284d602083018561253b565b61285a60408301846125a5565b949350505050565b61286b816126a3565b811461287657600080fd5b50565b60008151905061288881612862565b92915050565b6000602082840312156128a4576128a3612462565b5b60006128b284828501612879565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128f582612467565b915061290083612467565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612935576129346128bb565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561299757808604811115612973576129726128bb565b5b60018516156129825780820291505b808102905061299085612940565b9450612957565b94509492505050565b6000826129b05760019050612a6c565b816129be5760009050612a6c565b81600181146129d457600281146129de57612a0d565b6001915050612a6c565b60ff8411156129f0576129ef6128bb565b5b8360020a915084821115612a0757612a066128bb565b5b50612a6c565b5060208310610133831016604e8410600b8410161715612a425782820a905083811115612a3d57612a3c6128bb565b5b612a6c565b612a4f848484600161294d565b92509050818404811115612a6657612a656128bb565b5b81810290505b9392505050565b6000612a7e82612467565b9150612a8983612467565b9250612ab67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846129a0565b905092915050565b6000612ac982612467565b9150612ad483612467565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b0d57612b0c6128bb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b5282612467565b9150612b5d83612467565b925082612b6d57612b6c612b18565b5b828204905092915050565b6000612b8382612467565b9150612b8e83612467565b925082821015612ba157612ba06128bb565b5b828203905092915050565b6000819050919050565b6000612bd1612bcc612bc784612bac565b612629565b612467565b9050919050565b612be181612bb6565b82525050565b6000604082019050612bfc600083018561253b565b612c096020830184612bd8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612c4a82612467565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c7d57612c7c6128bb565b5b600182019050919050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000612cbe601183612742565b9150612cc982612c88565b602082019050919050565b60006020820190508181036000830152612ced81612cb1565b9050919050565b6000604082019050612d09600083018561253b565b612d1660208301846125a5565b9392505050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b6000612d53601b83612742565b9150612d5e82612d1d565b602082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b7f62616c616e6365202d20616d6f756e7420756e7374616b6564206d757374206260008201527f65206d6f7265207468616e206f7220657175616c20746f207a65726f00000000602082015250565b6000612de5603c83612742565b9150612df082612d89565b604082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b6000612e2682612467565b91506000821415612e3a57612e396128bb565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600069ffffffffffffffffffff82169050919050565b612e9381612e74565b8114612e9e57600080fd5b50565b600081519050612eb081612e8a565b92915050565b6000819050919050565b612ec981612eb6565b8114612ed457600080fd5b50565b600081519050612ee681612ec0565b92915050565b600081519050612efb81612471565b92915050565b600080600080600060a08688031215612f1d57612f1c612462565b5b6000612f2b88828901612ea1565b9550506020612f3c88828901612ed7565b9450506040612f4d88828901612eec565b9350506060612f5e88828901612eec565b9250506080612f6f88828901612ea1565b9150509295509295909350565b600060ff82169050919050565b612f9281612f7c565b8114612f9d57600080fd5b50565b600081519050612faf81612f89565b92915050565b600060208284031215612fcb57612fca612462565b5b6000612fd984828501612fa0565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061303e602683612742565b915061304982612fe2565b604082019050919050565b6000602082019050818103600083015261306d81613031565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130aa602083612742565b91506130b582613074565b602082019050919050565b600060208201905081810360008301526130d98161309d565b905091905056fea2646970667358221220fd3340581b1b96e5959c81f703a190f9c199d4c3c815fdb90b6edcf36c1db48f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 906,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 910,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 914,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "tokenPriceFeedMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 918,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToLastGetDappToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 922,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToDappReward",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 926,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToWethReward",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 930,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToDaiReward",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 933,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 936,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 938,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappTokenAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 940,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "wethTokenAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "daiTokenAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 945,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)822"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}