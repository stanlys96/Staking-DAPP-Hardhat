{
  "address": "0xdFF768FcEaa9Ed261999c21F5F2298a3900D9A10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dappTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "TokenFarm__AddressLessThan1DayForDappToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToLastGetDappToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get10DappToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserSingleTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66bf50b428628d984e71f8084e4e4b745bc297f85e68b64764f2b755831983de",
  "receipt": {
    "to": null,
    "from": "0xa584475D5360a77BdF129e37E300525608322be6",
    "contractAddress": "0xdFF768FcEaa9Ed261999c21F5F2298a3900D9A10",
    "transactionIndex": 35,
    "gasUsed": "1891211",
    "logsBloom": "0x
    "blockHash": "0xd407ffada232f0626f2b3997653f4b51478641ce0159938b0c163c68df650b45",
    "transactionHash": "0x66bf50b428628d984e71f8084e4e4b745bc297f85e68b64764f2b755831983de",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 7686292,
        "transactionHash": "0x66bf50b428628d984e71f8084e4e4b745bc297f85e68b64764f2b755831983de",
        "address": "0xdFF768FcEaa9Ed261999c21F5F2298a3900D9A10",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a584475d5360a77bdf129e37e300525608322be6"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xd407ffada232f0626f2b3997653f4b51478641ce0159938b0c163c68df650b45"
      }
    ],
    "blockNumber": 7686292,
    "cumulativeGasUsed": "4452053",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x92275d9850310dc90099CcC4608716288de91FfA"
  ],
  "numDeployments": 2,
  "solcInputHash": "221883f1ad16af9a1a38557d3afa9504",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"TokenFarm__AddressLessThan1DayForDappToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToLastGetDappToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get10DappToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserSingleTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror TokenFarm__AddressLessThan1DayForDappToken(address spender);\\n\\ncontract TokenFarm is Ownable {\\n    // mapping token address -> staker address -> amount\\n    mapping(address => mapping(address => uint256)) public stakingBalance;\\n    mapping(address => uint256) public uniqueTokensStaked;\\n    mapping(address => address) public tokenPriceFeedMapping;\\n    mapping(address => uint256) public addressToLastGetDappToken;\\n    address[] public stakers;\\n    address[] public allowedTokens;\\n    IERC20 public dappToken;\\n\\n    // stakeTokens\\n    // unstakeTokens\\n    // issueTokens\\n    // addAllowedTokens\\n    // getEthValue\\n\\n    constructor(address _dappTokenAddress) {\\n        dappToken = IERC20(_dappTokenAddress);\\n    }\\n\\n    function setPriceFeedContract(address _token, address _priceFeed)\\n        public\\n        onlyOwner\\n    {\\n        tokenPriceFeedMapping[_token] = _priceFeed;\\n    }\\n\\n    function issueTokens() public onlyOwner {\\n        // Issue tokens to all stakers\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint256 userTotalValue = getUserTotalValue(recipient);\\n            dappToken.transfer(recipient, userTotalValue);\\n            // send them a token reward\\n            // dappToken.transfer(recipient, );\\n            // based on their total value locked\\n        }\\n    }\\n\\n    function getUserTotalValue(address _user) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        require(uniqueTokensStaked[_user] > 0, \\\"No tokens staked!\\\");\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            totalValue += getUserSingleTokenValue(_user, allowedTokens[i]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getUserSingleTokenValue(address _user, address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (uniqueTokensStaked[_user] <= 0) {\\n            return 0;\\n        }\\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\\n        return ((stakingBalance[_token][_user] * price) / (10**decimals));\\n    }\\n\\n    function getTokenValue(address _token)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // priceFeedAddress\\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            priceFeedAddress\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 decimals = uint256(priceFeed.decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    function stakeTokens(uint256 _amount, address _token) public {\\n        // what tokens can they stake?\\n        // how much can they stake?\\n        require(_amount > 0, \\\"Amount must be more than zero!\\\");\\n        require(tokenIsAllowed(_token), \\\"Token is currently not allowed!\\\");\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        updateUniqueTokensStaked(msg.sender, _token);\\n        stakingBalance[_token][msg.sender] += _amount;\\n        if (uniqueTokensStaked[msg.sender] == 1) {\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    function unstakeTokens(address _token) public {\\n        uint256 balance = stakingBalance[_token][msg.sender];\\n        require(balance > 0, \\\"Staking balance cannot be 0\\\");\\n        IERC20(_token).transfer(msg.sender, balance);\\n        stakingBalance[_token][msg.sender] = 0;\\n        uniqueTokensStaked[msg.sender]--;\\n    }\\n\\n    function updateUniqueTokensStaked(address _user, address _token) internal {\\n        if (stakingBalance[_token][_user] <= 0) {\\n            uniqueTokensStaked[_user] += 1;\\n        }\\n    }\\n\\n    function addAllowedTokens(address _token) public onlyOwner {\\n        allowedTokens.push(_token);\\n    }\\n\\n    function tokenIsAllowed(address _token) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (_token == allowedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function get10DappToken() public {\\n        if (block.timestamp - addressToLastGetDappToken[msg.sender] < 1 days) {\\n            revert TokenFarm__AddressLessThan1DayForDappToken(msg.sender);\\n        }\\n        addressToLastGetDappToken[msg.sender] = block.timestamp;\\n        dappToken.transfer(msg.sender, 10000000000000000000);\\n    }\\n}\\n\",\"keccak256\":\"0xa6439f26b5cb0f61aef92d604a7061e4329c2949955337ad1dc3e50d6032feb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002271380380620022718339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61205a80620002176000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063b83e023411610071578063b83e02341461031b578063dd5b84671461034b578063f1c5d6c21461037b578063f2fde38b146103ac578063fd5e6dd1146103c85761012c565b8063715018a61461029d5780638144fee0146102a7578063877dd39d146102b15780638da5cb5b146102cd578063af3f5e22146102eb5761012c565b80632d1ad8b8116100f45780632d1ad8b8146101f9578063387ad87c146102155780635e5f2e26146102455780635eb186f81461027557806360ab5852146102935761012c565b80630bea440d14610131578063171e44ea1461014d578063276b11da1461016957806327927b3e1461019957806329161a00146101c9575b600080fd5b61014b60048036038101906101469190611540565b6103f8565b005b61016760048036038101906101629190611580565b610660565b005b610183600480360381019061017e91906115ad565b6106ce565b60405161019091906115fc565b60405180910390f35b6101b360048036038101906101ae9190611580565b6107d9565b6040516101c09190611626565b60405180910390f35b6101e360048036038101906101de91906115ad565b61080c565b6040516101f091906115fc565b60405180910390f35b610213600480360381019061020e9190611580565b610831565b005b61022f600480360381019061022a9190611580565b610a5e565b60405161023c91906115fc565b60405180910390f35b61025f600480360381019061025a9190611641565b610a76565b60405161026c9190611626565b60405180910390f35b61027d610ab5565b60405161028a91906116cd565b60405180910390f35b61029b610adb565b005b6102a5610c0b565b005b6102af610c1f565b005b6102cb60048036038101906102c691906115ad565b610daf565b005b6102d5610e39565b6040516102e29190611626565b60405180910390f35b61030560048036038101906103009190611580565b610e62565b60405161031291906115fc565b60405180910390f35b61033560048036038101906103309190611580565b610f6d565b60405161034291906115fc565b60405180910390f35b61036560048036038101906103609190611580565b610f85565b6040516103729190611703565b60405180910390f35b61039560048036038101906103909190611580565b611034565b6040516103a392919061171e565b60405180910390f35b6103c660048036038101906103c19190611580565b6111ba565b005b6103e260048036038101906103dd9190611641565b61123e565b6040516103ef9190611626565b60405180910390f35b6000821161043b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610432906117a4565b60405180910390fd5b61044481610f85565b610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90611810565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104c093929190611830565b602060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190611893565b5061051d338261127d565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a991906118ef565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561065c576005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b61066861135d565b6006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161071f57600090506107d3565b60008061072b84611034565b9150915080600a61073c9190611a78565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107c49190611ac3565b6107ce9190611b4c565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90611bc9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610930929190611be9565b602060405180830381600087803b15801561094a57600080fd5b505af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190611893565b506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610a5590611c12565b91905055505050565b60046020528060005260406000206000915090505481565b60068181548110610a8657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ae361135d565b60005b600580549050811015610c0857600060058281548110610b0957610b08611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610b4182610e62565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610ba0929190611be9565b602060405180830381600087803b158015610bba57600080fd5b505af1158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611893565b5050508080610c0090611c6b565b915050610ae6565b50565b610c1361135d565b610c1d60006113db565b565b62015180600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610c6e9190611cb4565b1015610cb157336040517f64187f0e000000000000000000000000000000000000000000000000000000008152600401610ca89190611626565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33678ac7230489e800006040518363ffffffff1660e01b8152600401610d5a929190611d23565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611893565b50565b610db761135d565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290611d98565b60405180910390fd5b60005b600680549050811015610f6357610f438460068381548110610f1357610f12611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106ce565b82610f4e91906118ef565b91508080610f5b90611c6b565b915050610eee565b5080915050919050565b60026020528060005260406000206000915090505481565b600080600090505b6006805490508110156110295760068181548110610fae57610fad611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561101657600191505061102f565b808061102190611c6b565b915050610f8d565b50600090505b919050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156110e857600080fd5b505afa1580156110fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111209190611e45565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561116e57600080fd5b505afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190611ef9565b60ff16905081819550955050505050915091565b6111c261135d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990611f98565b60405180910390fd5b61123b816113db565b50565b6005818154811061124e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611359576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461135191906118ef565b925050819055505b5050565b61136561149f565b73ffffffffffffffffffffffffffffffffffffffff16611383610e39565b73ffffffffffffffffffffffffffffffffffffffff16146113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090612004565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6114bf816114ac565b81146114ca57600080fd5b50565b6000813590506114dc816114b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061150d826114e2565b9050919050565b61151d81611502565b811461152857600080fd5b50565b60008135905061153a81611514565b92915050565b60008060408385031215611557576115566114a7565b5b6000611565858286016114cd565b92505060206115768582860161152b565b9150509250929050565b600060208284031215611596576115956114a7565b5b60006115a48482850161152b565b91505092915050565b600080604083850312156115c4576115c36114a7565b5b60006115d28582860161152b565b92505060206115e38582860161152b565b9150509250929050565b6115f6816114ac565b82525050565b600060208201905061161160008301846115ed565b92915050565b61162081611502565b82525050565b600060208201905061163b6000830184611617565b92915050565b600060208284031215611657576116566114a7565b5b6000611665848285016114cd565b91505092915050565b6000819050919050565b600061169361168e611689846114e2565b61166e565b6114e2565b9050919050565b60006116a582611678565b9050919050565b60006116b78261169a565b9050919050565b6116c7816116ac565b82525050565b60006020820190506116e260008301846116be565b92915050565b60008115159050919050565b6116fd816116e8565b82525050565b600060208201905061171860008301846116f4565b92915050565b600060408201905061173360008301856115ed565b61174060208301846115ed565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b600061178e601e83611747565b915061179982611758565b602082019050919050565b600060208201905081810360008301526117bd81611781565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b60006117fa601f83611747565b9150611805826117c4565b602082019050919050565b60006020820190508181036000830152611829816117ed565b9050919050565b60006060820190506118456000830186611617565b6118526020830185611617565b61185f60408301846115ed565b949350505050565b611870816116e8565b811461187b57600080fd5b50565b60008151905061188d81611867565b92915050565b6000602082840312156118a9576118a86114a7565b5b60006118b78482850161187e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118fa826114ac565b9150611905836114ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561193a576119396118c0565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561199c57808604811115611978576119776118c0565b5b60018516156119875780820291505b808102905061199585611945565b945061195c565b94509492505050565b6000826119b55760019050611a71565b816119c35760009050611a71565b81600181146119d957600281146119e357611a12565b6001915050611a71565b60ff8411156119f5576119f46118c0565b5b8360020a915084821115611a0c57611a0b6118c0565b5b50611a71565b5060208310610133831016604e8410600b8410161715611a475782820a905083811115611a4257611a416118c0565b5b611a71565b611a548484846001611952565b92509050818404811115611a6b57611a6a6118c0565b5b81810290505b9392505050565b6000611a83826114ac565b9150611a8e836114ac565b9250611abb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846119a5565b905092915050565b6000611ace826114ac565b9150611ad9836114ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b1257611b116118c0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b57826114ac565b9150611b62836114ac565b925082611b7257611b71611b1d565b5b828204905092915050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b6000611bb3601b83611747565b9150611bbe82611b7d565b602082019050919050565b60006020820190508181036000830152611be281611ba6565b9050919050565b6000604082019050611bfe6000830185611617565b611c0b60208301846115ed565b9392505050565b6000611c1d826114ac565b91506000821415611c3157611c306118c0565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611c76826114ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ca957611ca86118c0565b5b600182019050919050565b6000611cbf826114ac565b9150611cca836114ac565b925082821015611cdd57611cdc6118c0565b5b828203905092915050565b6000819050919050565b6000611d0d611d08611d0384611ce8565b61166e565b6114ac565b9050919050565b611d1d81611cf2565b82525050565b6000604082019050611d386000830185611617565b611d456020830184611d14565b9392505050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000611d82601183611747565b9150611d8d82611d4c565b602082019050919050565b60006020820190508181036000830152611db181611d75565b9050919050565b600069ffffffffffffffffffff82169050919050565b611dd781611db8565b8114611de257600080fd5b50565b600081519050611df481611dce565b92915050565b6000819050919050565b611e0d81611dfa565b8114611e1857600080fd5b50565b600081519050611e2a81611e04565b92915050565b600081519050611e3f816114b6565b92915050565b600080600080600060a08688031215611e6157611e606114a7565b5b6000611e6f88828901611de5565b9550506020611e8088828901611e1b565b9450506040611e9188828901611e30565b9350506060611ea288828901611e30565b9250506080611eb388828901611de5565b9150509295509295909350565b600060ff82169050919050565b611ed681611ec0565b8114611ee157600080fd5b50565b600081519050611ef381611ecd565b92915050565b600060208284031215611f0f57611f0e6114a7565b5b6000611f1d84828501611ee4565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611f82602683611747565b9150611f8d82611f26565b604082019050919050565b60006020820190508181036000830152611fb181611f75565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fee602083611747565b9150611ff982611fb8565b602082019050919050565b6000602082019050818103600083015261201d81611fe1565b905091905056fea26469706673582212206229252e196315ff02843c423ae64984d18396b002e1433a5aa4caebabab9e2a64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063b83e023411610071578063b83e02341461031b578063dd5b84671461034b578063f1c5d6c21461037b578063f2fde38b146103ac578063fd5e6dd1146103c85761012c565b8063715018a61461029d5780638144fee0146102a7578063877dd39d146102b15780638da5cb5b146102cd578063af3f5e22146102eb5761012c565b80632d1ad8b8116100f45780632d1ad8b8146101f9578063387ad87c146102155780635e5f2e26146102455780635eb186f81461027557806360ab5852146102935761012c565b80630bea440d14610131578063171e44ea1461014d578063276b11da1461016957806327927b3e1461019957806329161a00146101c9575b600080fd5b61014b60048036038101906101469190611540565b6103f8565b005b61016760048036038101906101629190611580565b610660565b005b610183600480360381019061017e91906115ad565b6106ce565b60405161019091906115fc565b60405180910390f35b6101b360048036038101906101ae9190611580565b6107d9565b6040516101c09190611626565b60405180910390f35b6101e360048036038101906101de91906115ad565b61080c565b6040516101f091906115fc565b60405180910390f35b610213600480360381019061020e9190611580565b610831565b005b61022f600480360381019061022a9190611580565b610a5e565b60405161023c91906115fc565b60405180910390f35b61025f600480360381019061025a9190611641565b610a76565b60405161026c9190611626565b60405180910390f35b61027d610ab5565b60405161028a91906116cd565b60405180910390f35b61029b610adb565b005b6102a5610c0b565b005b6102af610c1f565b005b6102cb60048036038101906102c691906115ad565b610daf565b005b6102d5610e39565b6040516102e29190611626565b60405180910390f35b61030560048036038101906103009190611580565b610e62565b60405161031291906115fc565b60405180910390f35b61033560048036038101906103309190611580565b610f6d565b60405161034291906115fc565b60405180910390f35b61036560048036038101906103609190611580565b610f85565b6040516103729190611703565b60405180910390f35b61039560048036038101906103909190611580565b611034565b6040516103a392919061171e565b60405180910390f35b6103c660048036038101906103c19190611580565b6111ba565b005b6103e260048036038101906103dd9190611641565b61123e565b6040516103ef9190611626565b60405180910390f35b6000821161043b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610432906117a4565b60405180910390fd5b61044481610f85565b610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90611810565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104c093929190611830565b602060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190611893565b5061051d338261127d565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a991906118ef565b925050819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561065c576005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b61066861135d565b6006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161071f57600090506107d3565b60008061072b84611034565b9150915080600a61073c9190611a78565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107c49190611ac3565b6107ce9190611b4c565b925050505b92915050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90611bc9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610930929190611be9565b602060405180830381600087803b15801561094a57600080fd5b505af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190611893565b506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610a5590611c12565b91905055505050565b60046020528060005260406000206000915090505481565b60068181548110610a8657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ae361135d565b60005b600580549050811015610c0857600060058281548110610b0957610b08611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610b4182610e62565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610ba0929190611be9565b602060405180830381600087803b158015610bba57600080fd5b505af1158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611893565b5050508080610c0090611c6b565b915050610ae6565b50565b610c1361135d565b610c1d60006113db565b565b62015180600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610c6e9190611cb4565b1015610cb157336040517f64187f0e000000000000000000000000000000000000000000000000000000008152600401610ca89190611626565b60405180910390fd5b42600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33678ac7230489e800006040518363ffffffff1660e01b8152600401610d5a929190611d23565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611893565b50565b610db761135d565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290611d98565b60405180910390fd5b60005b600680549050811015610f6357610f438460068381548110610f1357610f12611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106ce565b82610f4e91906118ef565b91508080610f5b90611c6b565b915050610eee565b5080915050919050565b60026020528060005260406000206000915090505481565b600080600090505b6006805490508110156110295760068181548110610fae57610fad611c3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561101657600191505061102f565b808061102190611c6b565b915050610f8d565b50600090505b919050565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156110e857600080fd5b505afa1580156110fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111209190611e45565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561116e57600080fd5b505afa158015611182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a69190611ef9565b60ff16905081819550955050505050915091565b6111c261135d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990611f98565b60405180910390fd5b61123b816113db565b50565b6005818154811061124e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611359576001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461135191906118ef565b925050819055505b5050565b61136561149f565b73ffffffffffffffffffffffffffffffffffffffff16611383610e39565b73ffffffffffffffffffffffffffffffffffffffff16146113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090612004565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6114bf816114ac565b81146114ca57600080fd5b50565b6000813590506114dc816114b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061150d826114e2565b9050919050565b61151d81611502565b811461152857600080fd5b50565b60008135905061153a81611514565b92915050565b60008060408385031215611557576115566114a7565b5b6000611565858286016114cd565b92505060206115768582860161152b565b9150509250929050565b600060208284031215611596576115956114a7565b5b60006115a48482850161152b565b91505092915050565b600080604083850312156115c4576115c36114a7565b5b60006115d28582860161152b565b92505060206115e38582860161152b565b9150509250929050565b6115f6816114ac565b82525050565b600060208201905061161160008301846115ed565b92915050565b61162081611502565b82525050565b600060208201905061163b6000830184611617565b92915050565b600060208284031215611657576116566114a7565b5b6000611665848285016114cd565b91505092915050565b6000819050919050565b600061169361168e611689846114e2565b61166e565b6114e2565b9050919050565b60006116a582611678565b9050919050565b60006116b78261169a565b9050919050565b6116c7816116ac565b82525050565b60006020820190506116e260008301846116be565b92915050565b60008115159050919050565b6116fd816116e8565b82525050565b600060208201905061171860008301846116f4565b92915050565b600060408201905061173360008301856115ed565b61174060208301846115ed565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b600061178e601e83611747565b915061179982611758565b602082019050919050565b600060208201905081810360008301526117bd81611781565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b60006117fa601f83611747565b9150611805826117c4565b602082019050919050565b60006020820190508181036000830152611829816117ed565b9050919050565b60006060820190506118456000830186611617565b6118526020830185611617565b61185f60408301846115ed565b949350505050565b611870816116e8565b811461187b57600080fd5b50565b60008151905061188d81611867565b92915050565b6000602082840312156118a9576118a86114a7565b5b60006118b78482850161187e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118fa826114ac565b9150611905836114ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561193a576119396118c0565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561199c57808604811115611978576119776118c0565b5b60018516156119875780820291505b808102905061199585611945565b945061195c565b94509492505050565b6000826119b55760019050611a71565b816119c35760009050611a71565b81600181146119d957600281146119e357611a12565b6001915050611a71565b60ff8411156119f5576119f46118c0565b5b8360020a915084821115611a0c57611a0b6118c0565b5b50611a71565b5060208310610133831016604e8410600b8410161715611a475782820a905083811115611a4257611a416118c0565b5b611a71565b611a548484846001611952565b92509050818404811115611a6b57611a6a6118c0565b5b81810290505b9392505050565b6000611a83826114ac565b9150611a8e836114ac565b9250611abb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846119a5565b905092915050565b6000611ace826114ac565b9150611ad9836114ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b1257611b116118c0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b57826114ac565b9150611b62836114ac565b925082611b7257611b71611b1d565b5b828204905092915050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b6000611bb3601b83611747565b9150611bbe82611b7d565b602082019050919050565b60006020820190508181036000830152611be281611ba6565b9050919050565b6000604082019050611bfe6000830185611617565b611c0b60208301846115ed565b9392505050565b6000611c1d826114ac565b91506000821415611c3157611c306118c0565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611c76826114ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ca957611ca86118c0565b5b600182019050919050565b6000611cbf826114ac565b9150611cca836114ac565b925082821015611cdd57611cdc6118c0565b5b828203905092915050565b6000819050919050565b6000611d0d611d08611d0384611ce8565b61166e565b6114ac565b9050919050565b611d1d81611cf2565b82525050565b6000604082019050611d386000830185611617565b611d456020830184611d14565b9392505050565b7f4e6f20746f6b656e73207374616b656421000000000000000000000000000000600082015250565b6000611d82601183611747565b9150611d8d82611d4c565b602082019050919050565b60006020820190508181036000830152611db181611d75565b9050919050565b600069ffffffffffffffffffff82169050919050565b611dd781611db8565b8114611de257600080fd5b50565b600081519050611df481611dce565b92915050565b6000819050919050565b611e0d81611dfa565b8114611e1857600080fd5b50565b600081519050611e2a81611e04565b92915050565b600081519050611e3f816114b6565b92915050565b600080600080600060a08688031215611e6157611e606114a7565b5b6000611e6f88828901611de5565b9550506020611e8088828901611e1b565b9450506040611e9188828901611e30565b9350506060611ea288828901611e30565b9250506080611eb388828901611de5565b9150509295509295909350565b600060ff82169050919050565b611ed681611ec0565b8114611ee157600080fd5b50565b600081519050611ef381611ecd565b92915050565b600060208284031215611f0f57611f0e6114a7565b5b6000611f1d84828501611ee4565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611f82602683611747565b9150611f8d82611f26565b604082019050919050565b60006020820190508181036000830152611fb181611f75565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fee602083611747565b9150611ff982611fb8565b602082019050919050565b6000602082019050818103600083015261201d81611fe1565b905091905056fea26469706673582212206229252e196315ff02843c423ae64984d18396b002e1433a5aa4caebabab9e2a64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 275,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 279,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 283,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "tokenPriceFeedMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 287,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToLastGetDappToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 290,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)236"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)236": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}