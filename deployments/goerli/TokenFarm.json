{
  "address": "0x1AC3Bf8D05230b5B1efFc7a6dB78C5597B9AdD5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dappTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "TokenFarm__AddressLessThan1DayForDappToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenFarm__BalanceMustBeMoreThanZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToLastGetDappToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get10DappToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserSingleTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6ca3d538a931d04c6c732f936cac8272b140d07d60c5a7951cdcb7699fca3ea",
  "receipt": {
    "to": null,
    "from": "0xa584475D5360a77BdF129e37E300525608322be6",
    "contractAddress": "0x1AC3Bf8D05230b5B1efFc7a6dB78C5597B9AdD5f",
    "transactionIndex": 32,
    "gasUsed": "2346194",
    "logsBloom": "0x
    "blockHash": "0x9dce2780b702898d21c2bca4ccc7a2925a943084fe914ef33944420d9bbfac62",
    "transactionHash": "0xf6ca3d538a931d04c6c732f936cac8272b140d07d60c5a7951cdcb7699fca3ea",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 7695567,
        "transactionHash": "0xf6ca3d538a931d04c6c732f936cac8272b140d07d60c5a7951cdcb7699fca3ea",
        "address": "0x1AC3Bf8D05230b5B1efFc7a6dB78C5597B9AdD5f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a584475d5360a77bdf129e37e300525608322be6"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x9dce2780b702898d21c2bca4ccc7a2925a943084fe914ef33944420d9bbfac62"
      }
    ],
    "blockNumber": 7695567,
    "cumulativeGasUsed": "6043633",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xECf51F0F5815C9FF72485634C905188A351eD8Be"
  ],
  "numDeployments": 8,
  "solcInputHash": "766935938018ba47784ef385faca2d29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"TokenFarm__AddressLessThan1DayForDappToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenFarm__BalanceMustBeMoreThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToLastGetDappToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get10DappToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserSingleTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Recompile - 4\\nerror TokenFarm__AddressLessThan1DayForDappToken(address spender);\\nerror TokenFarm__BalanceMustBeMoreThanZero();\\n\\ncontract TokenFarm is Ownable {\\n    // mapping token address -> staker address -> amount\\n    mapping(address => mapping(address => uint256)) public stakingBalance;\\n    // mapping staker address -> token address -> reward\\n    mapping(address => mapping(address => uint256)) public stakingReward;\\n    mapping(address => uint256) public uniqueTokensStaked;\\n    mapping(address => address) public tokenPriceFeedMapping;\\n    mapping(address => uint256) public addressToLastGetDappToken;\\n    address[] public stakers;\\n    address[] public allowedTokens;\\n    IERC20 public dappToken;\\n\\n    constructor(address _dappTokenAddress) {\\n        dappToken = IERC20(_dappTokenAddress);\\n    }\\n\\n    function setPriceFeedContract(address _token, address _priceFeed)\\n        public\\n        onlyOwner\\n    {\\n        bool foundToken = false;\\n        uint256 allowedTokensLength = allowedTokens.length;\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            if (allowedTokens[index] == _token) {\\n                foundToken = true;\\n                break;\\n            }\\n        }\\n        if (!foundToken) {\\n            allowedTokens.push(_token);\\n        }\\n        tokenPriceFeedMapping[_token] = _priceFeed;\\n    }\\n\\n    function getUserTotalValue(address _user) public view returns (uint256) {\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            totalValue += getUserSingleTokenValue(_user, allowedTokens[i]);\\n        }\\n        return totalValue;\\n    }\\n\\n    function getUserSingleTokenValue(address _user, address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (uniqueTokensStaked[_user] <= 0) {\\n            return 0;\\n        }\\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\\n        return ((stakingBalance[_token][_user] * price) / (10**decimals));\\n    }\\n\\n    function getTokenValue(address _token)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            priceFeedAddress\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 decimals = uint256(priceFeed.decimals());\\n        return (uint256(price), decimals);\\n    }\\n\\n    function stakeTokens(uint256 _amount, address _token) public {\\n        require(_amount > 0, \\\"Amount must be more than zero!\\\");\\n        require(tokenIsAllowed(_token), \\\"Token is currently not allowed!\\\");\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        updateUniqueTokensStaked(msg.sender, _token);\\n        stakingBalance[_token][msg.sender] += _amount;\\n        if (uniqueTokensStaked[msg.sender] == 1) {\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    function unstakeTokens(address _token, uint256 _amount) public {\\n        uint256 balance = stakingBalance[_token][msg.sender];\\n        require(balance > 0, \\\"Staking balance cannot be 0\\\");\\n        require(\\n            stakingBalance[_token][msg.sender] - _amount >= 0,\\n            \\\"balance - amount unstaked must be more than or equal to zero\\\"\\n        );\\n        IERC20(_token).transfer(msg.sender, _amount);\\n        stakingBalance[_token][msg.sender] -= _amount;\\n        if (stakingBalance[_token][msg.sender] == 0) {\\n            uniqueTokensStaked[msg.sender]--;\\n            if (uniqueTokensStaked[msg.sender] == 0) {\\n                for (uint256 index = 0; index < stakers.length; index++) {\\n                    if (stakers[index] == msg.sender) {\\n                        if (index >= stakers.length) return;\\n\\n                        for (uint i = index; i < stakers.length - 1; i++) {\\n                            stakers[i] = stakers[i + 1];\\n                        }\\n                        stakers.pop();\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function updateUniqueTokensStaked(address _user, address _token) internal {\\n        if (stakingBalance[_token][_user] <= 0) {\\n            uniqueTokensStaked[_user] += 1;\\n        }\\n    }\\n\\n    function tokenIsAllowed(address _token) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (_token == allowedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function get10DappToken() public {\\n        if (block.timestamp - addressToLastGetDappToken[msg.sender] < 1 days) {\\n            revert TokenFarm__AddressLessThan1DayForDappToken(msg.sender);\\n        }\\n        addressToLastGetDappToken[msg.sender] = block.timestamp;\\n        dappToken.transfer(msg.sender, 10000000000000000000);\\n    }\\n\\n    function issueRewards() external onlyOwner {\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            for (uint256 j = 0; j < allowedTokens.length; j++) {\\n                if (stakingBalance[allowedTokens[j]][stakers[i]] > 0) {\\n                    uint256 reward = getUserSingleTokenValue(\\n                        stakers[i],\\n                        allowedTokens[j]\\n                    );\\n                    stakingReward[stakers[i]][allowedTokens[j]] += reward;\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdrawReward(address _token) public {\\n        uint256 totalTokenReward = stakingReward[msg.sender][_token];\\n        if (totalTokenReward <= 0) {\\n            revert TokenFarm__BalanceMustBeMoreThanZero();\\n        }\\n        stakingReward[msg.sender][_token] = 0;\\n        dappToken.transfer(msg.sender, totalTokenReward);\\n    }\\n}\\n\",\"keccak256\":\"0x2645c3cf7a554faa703d78e10301eeb4fa34bf4271bc720f8d08ff64efa7fa0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ab138038062002ab18339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b61289a80620002176000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063877dd39d116100b8578063b86e321c1161007c578063b86e321c1461034e578063dd5b84671461036a578063e89a173e1461039a578063f1c5d6c2146103b6578063f2fde38b146103e7578063fd5e6dd11461040357610137565b8063877dd39d146102aa5780638da5cb5b146102c6578063af3f5e22146102e4578063b0370e0c14610314578063b83e02341461031e57610137565b8063387ad87c116100ff578063387ad87c146102185780635e5f2e26146102485780635eb186f814610278578063715018a6146102965780638144fee0146102a057610137565b8063014ff6341461013c5780630bea440d1461016c578063276b11da1461018857806327927b3e146101b857806329161a00146101e8575b600080fd5b61015660048036038101906101519190611cb5565b610433565b6040516101639190611d0e565b60405180910390f35b61018660048036038101906101819190611d55565b610458565b005b6101a2600480360381019061019d9190611cb5565b6106c0565b6040516101af9190611d0e565b60405180910390f35b6101d260048036038101906101cd9190611d95565b6107cb565b6040516101df9190611dd1565b60405180910390f35b61020260048036038101906101fd9190611cb5565b6107fe565b60405161020f9190611d0e565b60405180910390f35b610232600480360381019061022d9190611d95565b610823565b60405161023f9190611d0e565b60405180910390f35b610262600480360381019061025d9190611dec565b61083b565b60405161026f9190611dd1565b60405180910390f35b61028061087a565b60405161028d9190611e78565b60405180910390f35b61029e6108a0565b005b6102a86108b4565b005b6102c460048036038101906102bf9190611cb5565b610a44565b005b6102ce610bde565b6040516102db9190611dd1565b60405180910390f35b6102fe60048036038101906102f99190611d95565b610c07565b60405161030b9190611d0e565b60405180910390f35b61031c610c90565b005b61033860048036038101906103339190611d95565b610f7e565b6040516103459190611d0e565b60405180910390f35b61036860048036038101906103639190611d95565b610f96565b005b610384600480360381019061037f9190611d95565b611187565b6040516103919190611eae565b60405180910390f35b6103b460048036038101906103af9190611ec9565b611236565b005b6103d060048036038101906103cb9190611d95565b6117df565b6040516103de929190611f09565b60405180910390f35b61040160048036038101906103fc9190611d95565b611965565b005b61041d60048036038101906104189190611dec565b6119e9565b60405161042a9190611dd1565b60405180910390f35b6002602052816000526040600020602052806000526040600020600091509150505481565b6000821161049b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049290611f8f565b60405180910390fd5b6104a481611187565b6104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da90611ffb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105209392919061201b565b602060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610572919061207e565b5061057d3382611a28565b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060991906120da565b925050819055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156106bc576006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161071157600090506107c5565b60008061071d846117df565b9150915080600a61072e9190612263565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107b691906122ae565b6107c09190612337565b925050505b92915050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052816000526040600020602052806000526040600020600091509150505481565b60056020528060005260406000206000915090505481565b6007818154811061084b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108a8611b08565b6108b26000611b86565b565b62015180600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054426109039190612368565b101561094657336040517f64187f0e00000000000000000000000000000000000000000000000000000000815260040161093d9190611dd1565b60405180910390fd5b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33678ac7230489e800006040518363ffffffff1660e01b81526004016109ef9291906123d7565b602060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a41919061207e565b50565b610a4c611b08565b600080600780549050905060005b81811015610af0578473ffffffffffffffffffffffffffffffffffffffff1660078281548110610a8d57610a8c612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610add5760019250610af0565b8080610ae89061242f565b915050610a5a565b5081610b5a576007849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000905060005b600780549050811015610c8657610c668460078381548110610c3657610c35612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106c0565b82610c7191906120da565b91508080610c7e9061242f565b915050610c11565b5080915050919050565b610c98611b08565b60005b600680549050811015610f7b5760005b600780549050811015610f675760006001600060078481548110610cd257610cd1612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060068581548110610d4d57610d4c612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610f54576000610e4160068481548110610dd257610dd1612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660078481548110610e1157610e10612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106c0565b9050806002600060068681548110610e5c57610e5b612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060078581548110610ed757610ed6612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f4b91906120da565b92505081905550505b8080610f5f9061242f565b915050610cab565b508080610f739061242f565b915050610c9b565b50565b60036020528060005260406000206000915090505481565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611051576040517fd67ecd6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611130929190612478565b602060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611182919061207e565b505050565b600080600090505b60078054905081101561122b57600781815481106111b0576111af612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611218576001915050611231565b80806112239061242f565b91505061118f565b50600090505b919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f1906124ed565b60405180910390fd5b600082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113849190612368565b10156113c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bc9061257f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611400929190612478565b602060405180830381600087803b15801561141a57600080fd5b505af115801561142e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611452919061207e565b5081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114df9190612368565b925050819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156117d957600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906115bb9061259f565b91905055506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156117d85760005b6006805490508110156117d6573373ffffffffffffffffffffffffffffffffffffffff166006828154811061164357611642612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117c357600680549050811061169d5750506117db565b60008190505b60016006805490506116b59190612368565b8110156117765760066001826116cb91906120da565b815481106116dc576116db612400565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006828154811061171b5761171a612400565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061176e9061242f565b9150506116a3565b506006805480611789576117886125c9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556117d6565b80806117ce9061242f565b91505061160b565b505b5b505b5050565b6000806000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cb9190612685565b50505091505060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190612739565b60ff16905081819550955050505050915091565b61196d611b08565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d4906127d8565b60405180910390fd5b6119e681611b86565b50565b600681815481106119f957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611b04576001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611afc91906120da565b925050819055505b5050565b611b10611c4a565b73ffffffffffffffffffffffffffffffffffffffff16611b2e610bde565b73ffffffffffffffffffffffffffffffffffffffff1614611b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7b90612844565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c8282611c57565b9050919050565b611c9281611c77565b8114611c9d57600080fd5b50565b600081359050611caf81611c89565b92915050565b60008060408385031215611ccc57611ccb611c52565b5b6000611cda85828601611ca0565b9250506020611ceb85828601611ca0565b9150509250929050565b6000819050919050565b611d0881611cf5565b82525050565b6000602082019050611d236000830184611cff565b92915050565b611d3281611cf5565b8114611d3d57600080fd5b50565b600081359050611d4f81611d29565b92915050565b60008060408385031215611d6c57611d6b611c52565b5b6000611d7a85828601611d40565b9250506020611d8b85828601611ca0565b9150509250929050565b600060208284031215611dab57611daa611c52565b5b6000611db984828501611ca0565b91505092915050565b611dcb81611c77565b82525050565b6000602082019050611de66000830184611dc2565b92915050565b600060208284031215611e0257611e01611c52565b5b6000611e1084828501611d40565b91505092915050565b6000819050919050565b6000611e3e611e39611e3484611c57565b611e19565b611c57565b9050919050565b6000611e5082611e23565b9050919050565b6000611e6282611e45565b9050919050565b611e7281611e57565b82525050565b6000602082019050611e8d6000830184611e69565b92915050565b60008115159050919050565b611ea881611e93565b82525050565b6000602082019050611ec36000830184611e9f565b92915050565b60008060408385031215611ee057611edf611c52565b5b6000611eee85828601611ca0565b9250506020611eff85828601611d40565b9150509250929050565b6000604082019050611f1e6000830185611cff565b611f2b6020830184611cff565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d757374206265206d6f7265207468616e207a65726f210000600082015250565b6000611f79601e83611f32565b9150611f8482611f43565b602082019050919050565b60006020820190508181036000830152611fa881611f6c565b9050919050565b7f546f6b656e2069732063757272656e746c79206e6f7420616c6c6f7765642100600082015250565b6000611fe5601f83611f32565b9150611ff082611faf565b602082019050919050565b6000602082019050818103600083015261201481611fd8565b9050919050565b60006060820190506120306000830186611dc2565b61203d6020830185611dc2565b61204a6040830184611cff565b949350505050565b61205b81611e93565b811461206657600080fd5b50565b60008151905061207881612052565b92915050565b60006020828403121561209457612093611c52565b5b60006120a284828501612069565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120e582611cf5565b91506120f083611cf5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612125576121246120ab565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561218757808604811115612163576121626120ab565b5b60018516156121725780820291505b808102905061218085612130565b9450612147565b94509492505050565b6000826121a0576001905061225c565b816121ae576000905061225c565b81600181146121c457600281146121ce576121fd565b600191505061225c565b60ff8411156121e0576121df6120ab565b5b8360020a9150848211156121f7576121f66120ab565b5b5061225c565b5060208310610133831016604e8410600b84101617156122325782820a90508381111561222d5761222c6120ab565b5b61225c565b61223f848484600161213d565b92509050818404811115612256576122556120ab565b5b81810290505b9392505050565b600061226e82611cf5565b915061227983611cf5565b92506122a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612190565b905092915050565b60006122b982611cf5565b91506122c483611cf5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156122fd576122fc6120ab565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061234282611cf5565b915061234d83611cf5565b92508261235d5761235c612308565b5b828204905092915050565b600061237382611cf5565b915061237e83611cf5565b925082821015612391576123906120ab565b5b828203905092915050565b6000819050919050565b60006123c16123bc6123b78461239c565b611e19565b611cf5565b9050919050565b6123d1816123a6565b82525050565b60006040820190506123ec6000830185611dc2565b6123f960208301846123c8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061243a82611cf5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561246d5761246c6120ab565b5b600182019050919050565b600060408201905061248d6000830185611dc2565b61249a6020830184611cff565b9392505050565b7f5374616b696e672062616c616e63652063616e6e6f7420626520300000000000600082015250565b60006124d7601b83611f32565b91506124e2826124a1565b602082019050919050565b60006020820190508181036000830152612506816124ca565b9050919050565b7f62616c616e6365202d20616d6f756e7420756e7374616b6564206d757374206260008201527f65206d6f7265207468616e206f7220657175616c20746f207a65726f00000000602082015250565b6000612569603c83611f32565b91506125748261250d565b604082019050919050565b600060208201905081810360008301526125988161255c565b9050919050565b60006125aa82611cf5565b915060008214156125be576125bd6120ab565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600069ffffffffffffffffffff82169050919050565b612617816125f8565b811461262257600080fd5b50565b6000815190506126348161260e565b92915050565b6000819050919050565b61264d8161263a565b811461265857600080fd5b50565b60008151905061266a81612644565b92915050565b60008151905061267f81611d29565b92915050565b600080600080600060a086880312156126a1576126a0611c52565b5b60006126af88828901612625565b95505060206126c08882890161265b565b94505060406126d188828901612670565b93505060606126e288828901612670565b92505060806126f388828901612625565b9150509295509295909350565b600060ff82169050919050565b61271681612700565b811461272157600080fd5b50565b6000815190506127338161270d565b92915050565b60006020828403121561274f5761274e611c52565b5b600061275d84828501612724565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127c2602683611f32565b91506127cd82612766565b604082019050919050565b600060208201905081810360008301526127f1816127b5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061282e602083611f32565b9150612839826127f8565b602082019050919050565b6000602082019050818103600083015261285d81612821565b905091905056fea2646970667358221220c164e00de99bb42abea73b35f5b0b0e15f8a8866226d0efa116c688a4d61018564736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 908,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 914,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 918,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 922,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "tokenPriceFeedMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 926,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "addressToLastGetDappToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 929,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 932,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 935,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)822"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}