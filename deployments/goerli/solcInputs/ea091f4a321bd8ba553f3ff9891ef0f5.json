{
  "language": "Solidity",
  "sources": {
    "contracts/TokenFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror TokenFarm__AddressLessThan1DayForDappToken(address spender);\n\ncontract TokenFarm is Ownable {\n    // mapping token address -> staker address -> amount\n    mapping(address => mapping(address => uint256)) public stakingBalance;\n    mapping(address => uint256) public uniqueTokensStaked;\n    mapping(address => address) public tokenPriceFeedMapping;\n    mapping(address => uint256) public addressToLastGetDappToken;\n    mapping(address => uint256) public addressToDappReward;\n    mapping(address => uint256) public addressToWethReward;\n    mapping(address => uint256) public addressToDaiReward;\n    address[] public stakers;\n    address[] public allowedTokens;\n    address public dappTokenAddress;\n    address public wethTokenAddress;\n    address public daiTokenAddress;\n    IERC20 public dappToken;\n\n    constructor(address _dappTokenAddress) {\n        dappToken = IERC20(_dappTokenAddress);\n    }\n\n    function setPriceFeedContract(address _token, address _priceFeed)\n        public\n        onlyOwner\n    {\n        bool foundToken = false;\n        uint256 allowedTokensLength = allowedTokens.length;\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\n            if (allowedTokens[index] == _token) {\n                foundToken = true;\n                break;\n            }\n        }\n        if (!foundToken) {\n            allowedTokens.push(_token);\n        }\n        tokenPriceFeedMapping[_token] = _priceFeed;\n    }\n\n    function getUserTotalValue(address _user) public view returns (uint256) {\n        uint256 totalValue = 0;\n        require(uniqueTokensStaked[_user] > 0, \"No tokens staked!\");\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\n            totalValue += getUserSingleTokenValue(_user, allowedTokens[i]);\n        }\n        return totalValue;\n    }\n\n    function getUserSingleTokenValue(address _user, address _token)\n        public\n        view\n        returns (uint256)\n    {\n        if (uniqueTokensStaked[_user] <= 0) {\n            return 0;\n        }\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\n        return ((stakingBalance[_token][_user] * price) / (10**decimals));\n    }\n\n    function getTokenValue(address _token)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            priceFeedAddress\n        );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        uint256 decimals = uint256(priceFeed.decimals());\n        return (uint256(price), decimals);\n    }\n\n    function stakeTokens(uint256 _amount, address _token) public {\n        require(_amount > 0, \"Amount must be more than zero!\");\n        require(tokenIsAllowed(_token), \"Token is currently not allowed!\");\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        updateUniqueTokensStaked(msg.sender, _token);\n        stakingBalance[_token][msg.sender] += _amount;\n        if (uniqueTokensStaked[msg.sender] == 1) {\n            stakers.push(msg.sender);\n        }\n    }\n\n    function unstakeTokens(address _token, uint256 _amount) public {\n        uint256 balance = stakingBalance[_token][msg.sender];\n        require(balance > 0, \"Staking balance cannot be 0\");\n        require(\n            stakingBalance[_token][msg.sender] - _amount >= 0,\n            \"balance - amount unstaked must be more than or equal to zero\"\n        );\n        IERC20(_token).transfer(msg.sender, _amount);\n        stakingBalance[_token][msg.sender] -= _amount;\n        if (stakingBalance[_token][msg.sender] == 0) {\n            uniqueTokensStaked[msg.sender]--;\n            if (uniqueTokensStaked[msg.sender] == 0) {\n                for (uint256 index = 0; index < stakers.length; index++) {\n                    if (stakers[index] == msg.sender) {\n                        if (index >= stakers.length) return;\n\n                        for (uint i = index; i < stakers.length - 1; i++) {\n                            stakers[i] = stakers[i + 1];\n                        }\n                        stakers.pop();\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    function updateUniqueTokensStaked(address _user, address _token) internal {\n        if (stakingBalance[_token][_user] <= 0) {\n            uniqueTokensStaked[_user] += 1;\n        }\n    }\n\n    function tokenIsAllowed(address _token) public view returns (bool) {\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\n            if (_token == allowedTokens[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function get10DappToken() public {\n        if (block.timestamp - addressToLastGetDappToken[msg.sender] < 1 days) {\n            revert TokenFarm__AddressLessThan1DayForDappToken(msg.sender);\n        }\n        addressToLastGetDappToken[msg.sender] = block.timestamp;\n        dappToken.transfer(msg.sender, 10000000000000000000);\n    }\n\n    function issueRewards() public {\n        for (uint256 i = 0; i < stakers.length; i++) {\n            for (uint256 j = 0; j < allowedTokens.length; j++) {\n                if (stakingBalance[allowedTokens[j]][stakers[i]] > 0) {\n                    uint256 reward = getUserSingleTokenValue(\n                        stakers[i],\n                        allowedTokens[j]\n                    );\n                    if (allowedTokens[j] == dappTokenAddress) {\n                        addressToDappReward[msg.sender] += reward;\n                    }\n                    if (allowedTokens[j] == wethTokenAddress) {\n                        addressToWethReward[msg.sender] += reward;\n                    }\n                    if (allowedTokens[j] == daiTokenAddress) {\n                        addressToDaiReward[msg.sender] += reward;\n                    }\n                }\n            }\n        }\n    }\n\n    function withdrawReward(address _token) public {\n        if (_token == dappTokenAddress) {\n            uint256 totalTokenReward = addressToDappReward[msg.sender];\n            addressToDappReward[msg.sender] = 0;\n            dappToken.transfer(msg.sender, totalTokenReward);\n        }\n        if (_token == wethTokenAddress) {\n            uint256 totalTokenReward = addressToWethReward[msg.sender];\n            addressToWethReward[msg.sender] = 0;\n            dappToken.transfer(msg.sender, totalTokenReward);\n        }\n        if (_token == daiTokenAddress) {\n            uint256 totalTokenReward = addressToDaiReward[msg.sender];\n            addressToDaiReward[msg.sender] = 0;\n            dappToken.transfer(msg.sender, totalTokenReward);\n        }\n    }\n\n    function setDappTokenAddress(address _address) external onlyOwner {\n        dappTokenAddress = _address;\n    }\n\n    function setWethTokenAddress(address _address) external onlyOwner {\n        wethTokenAddress = _address;\n    }\n\n    function setDaiTokenAddress(address _address) external onlyOwner {\n        daiTokenAddress = _address;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}